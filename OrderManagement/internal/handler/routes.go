// Code generated by goctl. DO NOT EDIT.
<<<<<<< HEAD
// goctl 1.8.1
=======
// goctl 1.7.6
>>>>>>> main

package handler

import (
	"net/http"

	auth "OrderManagement/OrderManagement/internal/handler/auth"
	dept "OrderManagement/OrderManagement/internal/handler/dept"
	menu "OrderManagement/OrderManagement/internal/handler/menu"
	order "OrderManagement/OrderManagement/internal/handler/order"
	product "OrderManagement/OrderManagement/internal/handler/product"
	shop "OrderManagement/OrderManagement/internal/handler/shop"
	"OrderManagement/OrderManagement/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: auth.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/logout",
				Handler: auth.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/refresh-token",
				Handler: auth.RefreshTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/dept",
				Handler: dept.ListDeptHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dept",
				Handler: dept.AddDeptHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/dept/:deptId",
				Handler: dept.EditDeptHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/dept/:deptId/form",
				Handler: dept.ListDeptFromHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/dept/:ids",
				Handler: dept.DeleteDeptReqHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/dept/options",
				Handler: dept.ListDeptOptionsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/menus",
				Handler: menu.GetMenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/menus",
				Handler: menu.CreateMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/v1/menus/:Id",
				Handler: menu.UpdateMenuReqHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/v1/menus/:id",
				Handler: menu.DeleteMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/menus/:id",
				Handler: menu.GetMenuDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/menus/:id/form",
				Handler: menu.GetMenuFormDataHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/api/v1/menus/:menuId",
				Handler: menu.UpdateMenuVisibilityHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/menus/options",
				Handler: menu.GetMenuOptionsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/v1/menus/routes",
				Handler: menu.GetMenuRoutesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/order",
				Handler: order.AddOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/order",
				Handler: order.ListOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/order/:orderId",
				Handler: order.UpdateOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/product",
				Handler: product.AddProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/product",
				Handler: product.UpdateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/product",
				Handler: product.ListProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/product/sales/trend",
				Handler: product.GetProductSalesStatsHandler(serverCtx),
			},
		},
<<<<<<< HEAD
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
=======
>>>>>>> main
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/shop",
				Handler: shop.AddShopHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/shop",
				Handler: shop.UpdateShopHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/shop",
				Handler: shop.ListShopHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/shop/sales/stats",
				Handler: shop.GetShopSalesStatsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)
}
