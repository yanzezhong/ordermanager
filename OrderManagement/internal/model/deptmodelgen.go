// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1

package model

import (
	"context"
	"log"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type deptModel interface {
	Insert(ctx context.Context, data *Dept) error
	FindOne(ctx context.Context, id int64) (*Dept, error)
	Update(ctx context.Context, data *Dept) (*mongo.UpdateResult, error)
	Delete(ctx context.Context, id string) (int64, error)
}

type defaultDeptModel struct {
	conn *mon.Model
	counterModel CounterModel // 新增
}

func newDefaultDeptModel(conn *mon.Model, counterModel CounterModel) *defaultDeptModel {
	return &defaultDeptModel{conn: conn, counterModel: counterModel}
}

func (m *defaultDeptModel) Insert(ctx context.Context, data *Dept) error {
	// 获取自增ID
	id, err := getNextDeptID(ctx, m.counterModel)
	if err != nil {
		return err
	}
	data.ID = id
	data.CreateAt = time.Now()
	data.UpdateAt = time.Now()
	_, err = m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultDeptModel) FindOne(ctx context.Context, id int64) (*Dept, error) {
	
	var data Dept

	err := m.conn.FindOne(ctx, &data, bson.M{"_id": id})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeptModel) Update(ctx context.Context, data *Dept) (*mongo.UpdateResult, error) {
	data.UpdateAt = time.Now()

	res, err := m.conn.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultDeptModel) Delete(ctx context.Context, id string) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, ErrInvalidObjectId
	}

	res, err := m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return res, err
}

// 新增：自增ID生成函数
func getNextDeptID(ctx context.Context, counterModel CounterModel) (int64, error) {
	filter := bson.M{"modelName": "dept"}
	update := bson.M{"$inc": bson.M{"counter": 1}}

    counter, err := counterModel.FindOneAndUpdate(ctx,filter, update)
	if err != nil {
		return 0, err
	}
	log.Default().Printf("getNextDeptID counter: %v", counter)
	return counter, nil
}
